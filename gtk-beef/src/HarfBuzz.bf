namespace HarfBuzz;

using System;
using System.Interop;

class HarfBuzz
{
	public typealias bool_t = c_int;
	public typealias codepoint_t = c_uint;
	public typealias color_t = c_uint;
	public typealias font_get_font_h_extents_func_t = font_get_font_extents_func_t;
	public typealias font_get_font_v_extents_func_t = font_get_font_extents_func_t;
	public typealias font_get_glyph_h_advance_func_t = font_get_glyph_advance_func_t;
	public typealias font_get_glyph_h_advances_func_t = font_get_glyph_advances_func_t;
	public typealias font_get_glyph_h_kerning_func_t = font_get_glyph_kerning_func_t;
	public typealias font_get_glyph_h_origin_func_t = font_get_glyph_origin_func_t;
	public typealias font_get_glyph_v_advance_func_t = font_get_glyph_advance_func_t;
	public typealias font_get_glyph_v_advances_func_t = font_get_glyph_advances_func_t;
	public typealias font_get_glyph_v_kerning_func_t = font_get_glyph_kerning_func_t;
	public typealias font_get_glyph_v_origin_func_t = font_get_glyph_origin_func_t;
	public typealias mask_t = c_uint;
	public typealias ot_name_id_t = c_uint;
	public typealias position_t = c_int;
	public typealias tag_t = c_uint;
	[CRepr]
	public struct aat_layout_feature_selector_info_t
	{
		ot_name_id_t name_id;
		aat_layout_feature_selector_t enable;
		aat_layout_feature_selector_t disable;
		c_uint reserved;
	}
	public enum aat_layout_feature_selector_t : c_int
	{
		HB_AAT_LAYOUT_FEATURE_SELECTOR_INVALID,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_UNCONNECTED,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PARTIALLY_CONNECTED,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CURSIVE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_AND_LOWER_CASE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_CAPS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_LOWER_CASE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SMALL_CAPS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS_AND_SMALL_CAPS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_NUMBERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_NUMBERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_NUMBERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_NUMBERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SHOW_DIACRITICS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HIDE_DIACRITICS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DECOMPOSE_DIACRITICS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NORMAL_POSITION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SUPERIORS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_INFERIORS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ORDINALS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SCIENTIFIC_INFERIORS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_FRACTIONS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_VERTICAL_FRACTIONS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAGONAL_FRACTIONS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ORNAMENTS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DINGBATS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PI_CHARACTERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_FLEURONS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DECORATIVE_BORDERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_INTERNATIONAL_SYMBOLS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_MATH_SYMBOLS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ALTERNATES,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL1,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL2,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL3,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL4,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL5,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLE_OPTIONS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DISPLAY_TEXT,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ENGRAVED_TEXT,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ILLUMINATED_CAPS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_TITLING_CAPS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_TALL_CAPS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_CHARACTERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SIMPLIFIED_CHARACTERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1978_CHARACTERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1983_CHARACTERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1990_CHARACTERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_ONE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_TWO,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_THREE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FOUR,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FIVE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPERT_CHARACTERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS2004_CHARACTERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HOJO_CHARACTERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NLCCHARACTERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_NAMES_CHARACTERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_NUMBERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_NUMBERS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_TEXT,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_TEXT,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_TEXT,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_TEXT,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_TEXT,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_PROPORTIONAL_TEXT,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_HALF_WIDTH_TEXT,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_TRANSLITERATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HIRAGANA_TO_KATAKANA,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_KATAKANA_TO_HIRAGANA,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_KANA_TO_ROMANIZATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_HIRAGANA,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_KATAKANA,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_ONE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_TWO,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_THREE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ANNOTATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_BOX_ANNOTATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ROUNDED_BOX_ANNOTATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CIRCLE_ANNOTATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_CIRCLE_ANNOTATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PARENTHESIS_ANNOTATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIOD_ANNOTATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMAN_NUMERAL_ANNOTATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAMOND_ANNOTATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_BOX_ANNOTATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_ROUNDED_BOX_ANNOTATION,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_KANA,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_KANA,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_IDEOGRAPHS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_IDEOGRAPHS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_IDEOGRAPHS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_RUBY_KANA,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_SYMBOL_ALTERNATIVES,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_ONE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_TWO,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_THREE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FOUR,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FIVE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_IDEOGRAPHIC_ALTERNATIVES,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_ONE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_TWO,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_THREE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FOUR,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FIVE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_CENTERED,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_HBASELINE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_ITALIC_ROMAN,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLISTIC_ALTERNATES,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_ON,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_OFF,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_LOWER_CASE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_SMALL_CAPS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_PETITE_CAPS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_UPPER_CASE,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_SMALL_CAPS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_PETITE_CAPS,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_CJK_ROMAN,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_CJK_ROMAN,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_CJK_ROMAN,
		HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_CJK_ROMAN
	}
	public enum aat_layout_feature_type_t : c_int
	{
		HB_AAT_LAYOUT_FEATURE_TYPE_INVALID,
		HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC,
		HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES,
		HB_AAT_LAYOUT_FEATURE_TYPE_CURISVE_CONNECTION,
		HB_AAT_LAYOUT_FEATURE_TYPE_LETTER_CASE,
		HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION,
		HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT,
		HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING,
		HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION,
		HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS,
		HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS,
		HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS,
		HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES,
		HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS,
		HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE,
		HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING,
		HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION,
		HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA,
		HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN,
		HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT,
		HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA,
		HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES,
		HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES,
		HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE,
		HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE,
		HB_AAT_LAYOUT_FEATURE_TYPE_LANGUAGE_TAG_TYPE,
		HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE
	}
	[CRepr]
	public struct blob_t
	{
	}
	public enum buffer_cluster_level_t : c_int
	{
		HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES,
		HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS,
		HB_BUFFER_CLUSTER_LEVEL_CHARACTERS,
		HB_BUFFER_CLUSTER_LEVEL_DEFAULT
	}
	public enum buffer_content_type_t : c_int
	{
		HB_BUFFER_CONTENT_TYPE_INVALID,
		HB_BUFFER_CONTENT_TYPE_UNICODE,
		HB_BUFFER_CONTENT_TYPE_GLYPHS
	}
	[CRepr]
	public struct buffer_diff_flags_t
	{
		public const int HB_BUFFER_DIFF_FLAG_EQUAL = 0;
		public const int HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH = 1;
		public const int HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH = 2;
		public const int HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT = 4;
		public const int HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT = 8;
		public const int HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH = 16;
		public const int HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH = 32;
		public const int HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH = 64;
		public const int HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH = 128;
	}
	[CRepr]
	public struct buffer_flags_t
	{
		public const int HB_BUFFER_FLAG_DEFAULT = 0;
		public const int HB_BUFFER_FLAG_BOT = 1;
		public const int HB_BUFFER_FLAG_EOT = 2;
		public const int HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 4;
		public const int HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES = 8;
		public const int HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE = 16;
		public const int HB_BUFFER_FLAG_VERIFY = 32;
		public const int HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT = 64;
		public const int HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL = 128;
		public const int HB_BUFFER_FLAG_DEFINED = 255;
	}
	public function bool_t buffer_message_func_t(buffer_t buffer, font_t font, char8* message, void* user_data);
	[CRepr]
	public struct buffer_serialize_flags_t
	{
		public const int HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0;
		public const int HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 1;
		public const int HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 2;
		public const int HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 4;
		public const int HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS = 8;
		public const int HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS = 16;
		public const int HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES = 32;
		public const int HB_BUFFER_SERIALIZE_FLAG_DEFINED = 63;
	}
	public enum buffer_serialize_format_t : c_int
	{
		HB_BUFFER_SERIALIZE_FORMAT_TEXT,
		HB_BUFFER_SERIALIZE_FORMAT_JSON,
		HB_BUFFER_SERIALIZE_FORMAT_INVALID
	}
	[CRepr]
	public struct buffer_t
	{
	}
	public function void destroy_func_t(void* user_data);
	public enum direction_t : c_int
	{
		HB_DIRECTION_INVALID,
		HB_DIRECTION_LTR,
		HB_DIRECTION_RTL,
		HB_DIRECTION_TTB,
		HB_DIRECTION_BTT
	}
	public function void draw_close_path_func_t(draw_funcs_t dfuncs, void* draw_data, draw_state_t st, void* user_data);
	public function void draw_cubic_to_func_t(draw_funcs_t dfuncs, void* draw_data, draw_state_t st, float control1_x, float control1_y, float control2_x, float control2_y, float to_x, float to_y, void* user_data);
	[CRepr]
	public struct draw_funcs_t
	{
	}
	public function void draw_line_to_func_t(draw_funcs_t dfuncs, void* draw_data, draw_state_t st, float to_x, float to_y, void* user_data);
	public function void draw_move_to_func_t(draw_funcs_t dfuncs, void* draw_data, draw_state_t st, float to_x, float to_y, void* user_data);
	public function void draw_quadratic_to_func_t(draw_funcs_t dfuncs, void* draw_data, draw_state_t st, float control_x, float control_y, float to_x, float to_y, void* user_data);
	[CRepr]
	public struct draw_state_t
	{
		bool_t path_open;
		float path_start_x;
		float path_start_y;
		float current_x;
		float current_y;
		var_num_t reserved1;
		var_num_t reserved2;
		var_num_t reserved3;
		var_num_t reserved4;
		var_num_t reserved5;
		var_num_t reserved6;
		var_num_t reserved7;
	}
	[CRepr]
	public struct face_t
	{
	}
	[CRepr]
	public struct feature_t
	{
		tag_t tag;
		c_uint value;
		c_uint start;
		c_uint end;
	}
	[CRepr]
	public struct font_extents_t
	{
		position_t ascender;
		position_t descender;
		position_t line_gap;
		position_t reserved9;
		position_t reserved8;
		position_t reserved7;
		position_t reserved6;
		position_t reserved5;
		position_t reserved4;
		position_t reserved3;
		position_t reserved2;
		position_t reserved1;
	}
	[CRepr]
	public struct font_funcs_t
	{
	}
	public function bool_t font_get_font_extents_func_t(font_t font, void* font_data, font_extents_t extents, void* user_data);
	public function position_t font_get_glyph_advance_func_t(font_t font, void* font_data, codepoint_t glyph, void* user_data);
	public function void font_get_glyph_advances_func_t(font_t font, void* font_data, c_uint count, codepoint_t first_glyph, c_uint glyph_stride, position_t first_advance, c_uint advance_stride, void* user_data);
	public function bool_t font_get_glyph_contour_point_func_t(font_t font, void* font_data, codepoint_t glyph, c_uint point_index, position_t x, position_t y, void* user_data);
	public function bool_t font_get_glyph_extents_func_t(font_t font, void* font_data, codepoint_t glyph, glyph_extents_t extents, void* user_data);
	public function bool_t font_get_glyph_from_name_func_t(font_t font, void* font_data, c_int len, codepoint_t glyph, void* user_data);
	public function bool_t font_get_glyph_func_t(font_t font, void* font_data, codepoint_t unicode, codepoint_t variation_selector, codepoint_t glyph, void* user_data);
	public function position_t font_get_glyph_kerning_func_t(font_t font, void* font_data, codepoint_t first_glyph, codepoint_t second_glyph, void* user_data);
	public function bool_t font_get_glyph_name_func_t(font_t font, void* font_data, codepoint_t glyph, c_uint size, void* user_data);
	public function bool_t font_get_glyph_origin_func_t(font_t font, void* font_data, codepoint_t glyph, position_t x, position_t y, void* user_data);
	public function void font_get_glyph_shape_func_t(font_t font, void* font_data, codepoint_t glyph, draw_funcs_t draw_funcs, void* draw_data, void* user_data);
	public function bool_t font_get_nominal_glyph_func_t(font_t font, void* font_data, codepoint_t unicode, codepoint_t glyph, void* user_data);
	public function c_uint font_get_nominal_glyphs_func_t(font_t font, void* font_data, c_uint count, codepoint_t first_unicode, c_uint unicode_stride, codepoint_t first_glyph, c_uint glyph_stride, void* user_data);
	public function bool_t font_get_variation_glyph_func_t(font_t font, void* font_data, codepoint_t unicode, codepoint_t variation_selector, codepoint_t glyph, void* user_data);
	[CRepr]
	public struct font_t
	{
	}
	[CRepr]
	public struct glyph_extents_t
	{
		position_t x_bearing;
		position_t y_bearing;
		position_t width;
		position_t height;
	}
	[CRepr]
	public struct glyph_flags_t
	{
		public const int HB_GLYPH_FLAG_UNSAFE_TO_BREAK = 1;
		public const int HB_GLYPH_FLAG_UNSAFE_TO_CONCAT = 2;
		public const int HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL = 4;
		public const int HB_GLYPH_FLAG_DEFINED = 7;
	}
	[CRepr]
	public struct glyph_info_t
	{
		codepoint_t codepoint;
		mask_t mask;
		c_uint cluster;
		var_int_t var1;
		var_int_t var2;
	}
	[CRepr]
	public struct glyph_position_t
	{
		position_t x_advance;
		position_t y_advance;
		position_t x_offset;
		position_t y_offset;
		var_int_t var_;
	}
	[CRepr]
	public struct language_t
	{
	}
	[CRepr]
	public struct map_t
	{
	}
	public enum memory_mode_t : c_int
	{
		HB_MEMORY_MODE_DUPLICATE,
		HB_MEMORY_MODE_READONLY,
		HB_MEMORY_MODE_WRITABLE,
		HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE
	}
	[CRepr]
	public struct ot_color_layer_t
	{
		codepoint_t glyph;
		c_uint color_index;
	}
	[CRepr]
	public struct ot_color_palette_flags_t
	{
		public const int HB_OT_COLOR_PALETTE_FLAG_DEFAULT = 0;
		public const int HB_OT_COLOR_PALETTE_FLAG_USABLE_WITH_LIGHT_BACKGROUND = 1;
		public const int HB_OT_COLOR_PALETTE_FLAG_USABLE_WITH_DARK_BACKGROUND = 2;
	}
	public enum ot_layout_baseline_tag_t : c_int
	{
		HB_OT_LAYOUT_BASELINE_TAG_ROMAN,
		HB_OT_LAYOUT_BASELINE_TAG_HANGING,
		HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_BOTTOM_OR_LEFT,
		HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_TOP_OR_RIGHT,
		HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_CENTRAL,
		HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_BOTTOM_OR_LEFT,
		HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_TOP_OR_RIGHT,
		HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_CENTRAL,
		HB_OT_LAYOUT_BASELINE_TAG_MATH
	}
	public enum ot_layout_glyph_class_t : c_int
	{
		HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED,
		HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH,
		HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE,
		HB_OT_LAYOUT_GLYPH_CLASS_MARK,
		HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT
	}
	public enum ot_math_constant_t : c_int
	{
		HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN,
		HB_OT_MATH_CONSTANT_SCRIPT_SCRIPT_PERCENT_SCALE_DOWN,
		HB_OT_MATH_CONSTANT_DELIMITED_SUB_FORMULA_MIN_HEIGHT,
		HB_OT_MATH_CONSTANT_DISPLAY_OPERATOR_MIN_HEIGHT,
		HB_OT_MATH_CONSTANT_MATH_LEADING,
		HB_OT_MATH_CONSTANT_AXIS_HEIGHT,
		HB_OT_MATH_CONSTANT_ACCENT_BASE_HEIGHT,
		HB_OT_MATH_CONSTANT_FLATTENED_ACCENT_BASE_HEIGHT,
		HB_OT_MATH_CONSTANT_SUBSCRIPT_SHIFT_DOWN,
		HB_OT_MATH_CONSTANT_SUBSCRIPT_TOP_MAX,
		HB_OT_MATH_CONSTANT_SUBSCRIPT_BASELINE_DROP_MIN,
		HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP,
		HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP_CRAMPED,
		HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MIN,
		HB_OT_MATH_CONSTANT_SUPERSCRIPT_BASELINE_DROP_MAX,
		HB_OT_MATH_CONSTANT_SUB_SUPERSCRIPT_GAP_MIN,
		HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MAX_WITH_SUBSCRIPT,
		HB_OT_MATH_CONSTANT_SPACE_AFTER_SCRIPT,
		HB_OT_MATH_CONSTANT_UPPER_LIMIT_GAP_MIN,
		HB_OT_MATH_CONSTANT_UPPER_LIMIT_BASELINE_RISE_MIN,
		HB_OT_MATH_CONSTANT_LOWER_LIMIT_GAP_MIN,
		HB_OT_MATH_CONSTANT_LOWER_LIMIT_BASELINE_DROP_MIN,
		HB_OT_MATH_CONSTANT_STACK_TOP_SHIFT_UP,
		HB_OT_MATH_CONSTANT_STACK_TOP_DISPLAY_STYLE_SHIFT_UP,
		HB_OT_MATH_CONSTANT_STACK_BOTTOM_SHIFT_DOWN,
		HB_OT_MATH_CONSTANT_STACK_BOTTOM_DISPLAY_STYLE_SHIFT_DOWN,
		HB_OT_MATH_CONSTANT_STACK_GAP_MIN,
		HB_OT_MATH_CONSTANT_STACK_DISPLAY_STYLE_GAP_MIN,
		HB_OT_MATH_CONSTANT_STRETCH_STACK_TOP_SHIFT_UP,
		HB_OT_MATH_CONSTANT_STRETCH_STACK_BOTTOM_SHIFT_DOWN,
		HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_ABOVE_MIN,
		HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_BELOW_MIN,
		HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_SHIFT_UP,
		HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_DISPLAY_STYLE_SHIFT_UP,
		HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_SHIFT_DOWN,
		HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_DISPLAY_STYLE_SHIFT_DOWN,
		HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_GAP_MIN,
		HB_OT_MATH_CONSTANT_FRACTION_NUM_DISPLAY_STYLE_GAP_MIN,
		HB_OT_MATH_CONSTANT_FRACTION_RULE_THICKNESS,
		HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_GAP_MIN,
		HB_OT_MATH_CONSTANT_FRACTION_DENOM_DISPLAY_STYLE_GAP_MIN,
		HB_OT_MATH_CONSTANT_SKEWED_FRACTION_HORIZONTAL_GAP,
		HB_OT_MATH_CONSTANT_SKEWED_FRACTION_VERTICAL_GAP,
		HB_OT_MATH_CONSTANT_OVERBAR_VERTICAL_GAP,
		HB_OT_MATH_CONSTANT_OVERBAR_RULE_THICKNESS,
		HB_OT_MATH_CONSTANT_OVERBAR_EXTRA_ASCENDER,
		HB_OT_MATH_CONSTANT_UNDERBAR_VERTICAL_GAP,
		HB_OT_MATH_CONSTANT_UNDERBAR_RULE_THICKNESS,
		HB_OT_MATH_CONSTANT_UNDERBAR_EXTRA_DESCENDER,
		HB_OT_MATH_CONSTANT_RADICAL_VERTICAL_GAP,
		HB_OT_MATH_CONSTANT_RADICAL_DISPLAY_STYLE_VERTICAL_GAP,
		HB_OT_MATH_CONSTANT_RADICAL_RULE_THICKNESS,
		HB_OT_MATH_CONSTANT_RADICAL_EXTRA_ASCENDER,
		HB_OT_MATH_CONSTANT_RADICAL_KERN_BEFORE_DEGREE,
		HB_OT_MATH_CONSTANT_RADICAL_KERN_AFTER_DEGREE,
		HB_OT_MATH_CONSTANT_RADICAL_DEGREE_BOTTOM_RAISE_PERCENT
	}
	[CRepr]
	public struct ot_math_glyph_part_flags_t
	{
		public const int HB_OT_MATH_GLYPH_PART_FLAG_EXTENDER = 1;
	}
	[CRepr]
	public struct ot_math_glyph_part_t
	{
		codepoint_t glyph;
		position_t start_connector_length;
		position_t end_connector_length;
		position_t full_advance;
		ot_math_glyph_part_flags_t flags;
	}
	[CRepr]
	public struct ot_math_glyph_variant_t
	{
		codepoint_t glyph;
		position_t advance;
	}
	[CRepr]
	public struct ot_math_kern_entry_t
	{
		position_t max_correction_height;
		position_t kern_value;
	}
	public enum ot_math_kern_t : c_int
	{
		HB_OT_MATH_KERN_TOP_RIGHT,
		HB_OT_MATH_KERN_TOP_LEFT,
		HB_OT_MATH_KERN_BOTTOM_RIGHT,
		HB_OT_MATH_KERN_BOTTOM_LEFT
	}
	public enum ot_meta_tag_t : c_int
	{
		HB_OT_META_TAG_DESIGN_LANGUAGES,
		HB_OT_META_TAG_SUPPORTED_LANGUAGES
	}
	public enum ot_metrics_tag_t : c_int
	{
		HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER,
		HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER,
		HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP,
		HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_ASCENT,
		HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_DESCENT,
		HB_OT_METRICS_TAG_VERTICAL_ASCENDER,
		HB_OT_METRICS_TAG_VERTICAL_DESCENDER,
		HB_OT_METRICS_TAG_VERTICAL_LINE_GAP,
		HB_OT_METRICS_TAG_HORIZONTAL_CARET_RISE,
		HB_OT_METRICS_TAG_HORIZONTAL_CARET_RUN,
		HB_OT_METRICS_TAG_HORIZONTAL_CARET_OFFSET,
		HB_OT_METRICS_TAG_VERTICAL_CARET_RISE,
		HB_OT_METRICS_TAG_VERTICAL_CARET_RUN,
		HB_OT_METRICS_TAG_VERTICAL_CARET_OFFSET,
		HB_OT_METRICS_TAG_X_HEIGHT,
		HB_OT_METRICS_TAG_CAP_HEIGHT,
		HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_SIZE,
		HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_SIZE,
		HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_OFFSET,
		HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_OFFSET,
		HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_SIZE,
		HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_SIZE,
		HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_OFFSET,
		HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_OFFSET,
		HB_OT_METRICS_TAG_STRIKEOUT_SIZE,
		HB_OT_METRICS_TAG_STRIKEOUT_OFFSET,
		HB_OT_METRICS_TAG_UNDERLINE_SIZE,
		HB_OT_METRICS_TAG_UNDERLINE_OFFSET
	}
	[CRepr]
	public struct ot_name_entry_t
	{
		ot_name_id_t name_id;
		var_int_t var_;
		language_t language;
	}
	[CRepr]
	public struct ot_var_axis_flags_t
	{
		public const int HB_OT_VAR_AXIS_FLAG_HIDDEN = 1;
	}
	[CRepr]
	public struct ot_var_axis_info_t
	{
		c_uint axis_index;
		tag_t tag;
		ot_name_id_t name_id;
		ot_var_axis_flags_t flags;
		float min_value;
		float default_value;
		float max_value;
		c_uint reserved;
	}
	[CRepr]
	public struct ot_var_axis_t
	{
		tag_t tag;
		ot_name_id_t name_id;
		float min_value;
		float default_value;
		float max_value;
	}
	public function blob_t reference_table_func_t(face_t face, tag_t tag, void* user_data);
	public enum script_t : c_int
	{
		HB_SCRIPT_COMMON,
		HB_SCRIPT_INHERITED,
		HB_SCRIPT_UNKNOWN,
		HB_SCRIPT_ARABIC,
		HB_SCRIPT_ARMENIAN,
		HB_SCRIPT_BENGALI,
		HB_SCRIPT_CYRILLIC,
		HB_SCRIPT_DEVANAGARI,
		HB_SCRIPT_GEORGIAN,
		HB_SCRIPT_GREEK,
		HB_SCRIPT_GUJARATI,
		HB_SCRIPT_GURMUKHI,
		HB_SCRIPT_HANGUL,
		HB_SCRIPT_HAN,
		HB_SCRIPT_HEBREW,
		HB_SCRIPT_HIRAGANA,
		HB_SCRIPT_KANNADA,
		HB_SCRIPT_KATAKANA,
		HB_SCRIPT_LAO,
		HB_SCRIPT_LATIN,
		HB_SCRIPT_MALAYALAM,
		HB_SCRIPT_ORIYA,
		HB_SCRIPT_TAMIL,
		HB_SCRIPT_TELUGU,
		HB_SCRIPT_THAI,
		HB_SCRIPT_TIBETAN,
		HB_SCRIPT_BOPOMOFO,
		HB_SCRIPT_BRAILLE,
		HB_SCRIPT_CANADIAN_SYLLABICS,
		HB_SCRIPT_CHEROKEE,
		HB_SCRIPT_ETHIOPIC,
		HB_SCRIPT_KHMER,
		HB_SCRIPT_MONGOLIAN,
		HB_SCRIPT_MYANMAR,
		HB_SCRIPT_OGHAM,
		HB_SCRIPT_RUNIC,
		HB_SCRIPT_SINHALA,
		HB_SCRIPT_SYRIAC,
		HB_SCRIPT_THAANA,
		HB_SCRIPT_YI,
		HB_SCRIPT_DESERET,
		HB_SCRIPT_GOTHIC,
		HB_SCRIPT_OLD_ITALIC,
		HB_SCRIPT_BUHID,
		HB_SCRIPT_HANUNOO,
		HB_SCRIPT_TAGALOG,
		HB_SCRIPT_TAGBANWA,
		HB_SCRIPT_CYPRIOT,
		HB_SCRIPT_LIMBU,
		HB_SCRIPT_LINEAR_B,
		HB_SCRIPT_OSMANYA,
		HB_SCRIPT_SHAVIAN,
		HB_SCRIPT_TAI_LE,
		HB_SCRIPT_UGARITIC,
		HB_SCRIPT_BUGINESE,
		HB_SCRIPT_COPTIC,
		HB_SCRIPT_GLAGOLITIC,
		HB_SCRIPT_KHAROSHTHI,
		HB_SCRIPT_NEW_TAI_LUE,
		HB_SCRIPT_OLD_PERSIAN,
		HB_SCRIPT_SYLOTI_NAGRI,
		HB_SCRIPT_TIFINAGH,
		HB_SCRIPT_BALINESE,
		HB_SCRIPT_CUNEIFORM,
		HB_SCRIPT_NKO,
		HB_SCRIPT_PHAGS_PA,
		HB_SCRIPT_PHOENICIAN,
		HB_SCRIPT_CARIAN,
		HB_SCRIPT_CHAM,
		HB_SCRIPT_KAYAH_LI,
		HB_SCRIPT_LEPCHA,
		HB_SCRIPT_LYCIAN,
		HB_SCRIPT_LYDIAN,
		HB_SCRIPT_OL_CHIKI,
		HB_SCRIPT_REJANG,
		HB_SCRIPT_SAURASHTRA,
		HB_SCRIPT_SUNDANESE,
		HB_SCRIPT_VAI,
		HB_SCRIPT_AVESTAN,
		HB_SCRIPT_BAMUM,
		HB_SCRIPT_EGYPTIAN_HIEROGLYPHS,
		HB_SCRIPT_IMPERIAL_ARAMAIC,
		HB_SCRIPT_INSCRIPTIONAL_PAHLAVI,
		HB_SCRIPT_INSCRIPTIONAL_PARTHIAN,
		HB_SCRIPT_JAVANESE,
		HB_SCRIPT_KAITHI,
		HB_SCRIPT_LISU,
		HB_SCRIPT_MEETEI_MAYEK,
		HB_SCRIPT_OLD_SOUTH_ARABIAN,
		HB_SCRIPT_OLD_TURKIC,
		HB_SCRIPT_SAMARITAN,
		HB_SCRIPT_TAI_THAM,
		HB_SCRIPT_TAI_VIET,
		HB_SCRIPT_BATAK,
		HB_SCRIPT_BRAHMI,
		HB_SCRIPT_MANDAIC,
		HB_SCRIPT_CHAKMA,
		HB_SCRIPT_MEROITIC_CURSIVE,
		HB_SCRIPT_MEROITIC_HIEROGLYPHS,
		HB_SCRIPT_MIAO,
		HB_SCRIPT_SHARADA,
		HB_SCRIPT_SORA_SOMPENG,
		HB_SCRIPT_TAKRI,
		HB_SCRIPT_BASSA_VAH,
		HB_SCRIPT_CAUCASIAN_ALBANIAN,
		HB_SCRIPT_DUPLOYAN,
		HB_SCRIPT_ELBASAN,
		HB_SCRIPT_GRANTHA,
		HB_SCRIPT_KHOJKI,
		HB_SCRIPT_KHUDAWADI,
		HB_SCRIPT_LINEAR_A,
		HB_SCRIPT_MAHAJANI,
		HB_SCRIPT_MANICHAEAN,
		HB_SCRIPT_MENDE_KIKAKUI,
		HB_SCRIPT_MODI,
		HB_SCRIPT_MRO,
		HB_SCRIPT_NABATAEAN,
		HB_SCRIPT_OLD_NORTH_ARABIAN,
		HB_SCRIPT_OLD_PERMIC,
		HB_SCRIPT_PAHAWH_HMONG,
		HB_SCRIPT_PALMYRENE,
		HB_SCRIPT_PAU_CIN_HAU,
		HB_SCRIPT_PSALTER_PAHLAVI,
		HB_SCRIPT_SIDDHAM,
		HB_SCRIPT_TIRHUTA,
		HB_SCRIPT_WARANG_CITI,
		HB_SCRIPT_AHOM,
		HB_SCRIPT_ANATOLIAN_HIEROGLYPHS,
		HB_SCRIPT_HATRAN,
		HB_SCRIPT_MULTANI,
		HB_SCRIPT_OLD_HUNGARIAN,
		HB_SCRIPT_SIGNWRITING,
		HB_SCRIPT_ADLAM,
		HB_SCRIPT_BHAIKSUKI,
		HB_SCRIPT_MARCHEN,
		HB_SCRIPT_OSAGE,
		HB_SCRIPT_TANGUT,
		HB_SCRIPT_NEWA,
		HB_SCRIPT_MASARAM_GONDI,
		HB_SCRIPT_NUSHU,
		HB_SCRIPT_SOYOMBO,
		HB_SCRIPT_ZANABAZAR_SQUARE,
		HB_SCRIPT_DOGRA,
		HB_SCRIPT_GUNJALA_GONDI,
		HB_SCRIPT_HANIFI_ROHINGYA,
		HB_SCRIPT_MAKASAR,
		HB_SCRIPT_MEDEFAIDRIN,
		HB_SCRIPT_OLD_SOGDIAN,
		HB_SCRIPT_SOGDIAN,
		HB_SCRIPT_ELYMAIC,
		HB_SCRIPT_NANDINAGARI,
		HB_SCRIPT_NYIAKENG_PUACHUE_HMONG,
		HB_SCRIPT_WANCHO,
		HB_SCRIPT_CHORASMIAN,
		HB_SCRIPT_DIVES_AKURU,
		HB_SCRIPT_KHITAN_SMALL_SCRIPT,
		HB_SCRIPT_YEZIDI,
		HB_SCRIPT_CYPRO_MINOAN,
		HB_SCRIPT_OLD_UYGHUR,
		HB_SCRIPT_TANGSA,
		HB_SCRIPT_TOTO,
		HB_SCRIPT_VITHKUQI,
		HB_SCRIPT_MATH,
		HB_SCRIPT_KAWI,
		HB_SCRIPT_NAG_MUNDARI,
		HB_SCRIPT_INVALID
	}
	[CRepr]
	public struct segment_properties_t
	{
		direction_t direction;
		script_t script;
		language_t language;
		void* reserved1;
		void* reserved2;
	}
	[CRepr]
	public struct set_t
	{
	}
	[CRepr]
	public struct shape_plan_t
	{
	}
	public enum style_tag_t : c_int
	{
		HB_STYLE_TAG_ITALIC,
		HB_STYLE_TAG_OPTICAL_SIZE,
		HB_STYLE_TAG_SLANT_ANGLE,
		HB_STYLE_TAG_SLANT_RATIO,
		HB_STYLE_TAG_WIDTH,
		HB_STYLE_TAG_WEIGHT
	}
	public function unicode_combining_class_t unicode_combining_class_func_t(unicode_funcs_t ufuncs, codepoint_t unicode, void* user_data);
	public enum unicode_combining_class_t : c_int
	{
		HB_UNICODE_COMBINING_CLASS_NOT_REORDERED,
		HB_UNICODE_COMBINING_CLASS_OVERLAY,
		HB_UNICODE_COMBINING_CLASS_NUKTA,
		HB_UNICODE_COMBINING_CLASS_KANA_VOICING,
		HB_UNICODE_COMBINING_CLASS_VIRAMA,
		HB_UNICODE_COMBINING_CLASS_CCC10,
		HB_UNICODE_COMBINING_CLASS_CCC11,
		HB_UNICODE_COMBINING_CLASS_CCC12,
		HB_UNICODE_COMBINING_CLASS_CCC13,
		HB_UNICODE_COMBINING_CLASS_CCC14,
		HB_UNICODE_COMBINING_CLASS_CCC15,
		HB_UNICODE_COMBINING_CLASS_CCC16,
		HB_UNICODE_COMBINING_CLASS_CCC17,
		HB_UNICODE_COMBINING_CLASS_CCC18,
		HB_UNICODE_COMBINING_CLASS_CCC19,
		HB_UNICODE_COMBINING_CLASS_CCC20,
		HB_UNICODE_COMBINING_CLASS_CCC21,
		HB_UNICODE_COMBINING_CLASS_CCC22,
		HB_UNICODE_COMBINING_CLASS_CCC23,
		HB_UNICODE_COMBINING_CLASS_CCC24,
		HB_UNICODE_COMBINING_CLASS_CCC25,
		HB_UNICODE_COMBINING_CLASS_CCC26,
		HB_UNICODE_COMBINING_CLASS_CCC27,
		HB_UNICODE_COMBINING_CLASS_CCC28,
		HB_UNICODE_COMBINING_CLASS_CCC29,
		HB_UNICODE_COMBINING_CLASS_CCC30,
		HB_UNICODE_COMBINING_CLASS_CCC31,
		HB_UNICODE_COMBINING_CLASS_CCC32,
		HB_UNICODE_COMBINING_CLASS_CCC33,
		HB_UNICODE_COMBINING_CLASS_CCC34,
		HB_UNICODE_COMBINING_CLASS_CCC35,
		HB_UNICODE_COMBINING_CLASS_CCC36,
		HB_UNICODE_COMBINING_CLASS_CCC84,
		HB_UNICODE_COMBINING_CLASS_CCC91,
		HB_UNICODE_COMBINING_CLASS_CCC103,
		HB_UNICODE_COMBINING_CLASS_CCC107,
		HB_UNICODE_COMBINING_CLASS_CCC118,
		HB_UNICODE_COMBINING_CLASS_CCC122,
		HB_UNICODE_COMBINING_CLASS_CCC129,
		HB_UNICODE_COMBINING_CLASS_CCC130,
		HB_UNICODE_COMBINING_CLASS_CCC133,
		HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT,
		HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW,
		HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE,
		HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT,
		HB_UNICODE_COMBINING_CLASS_BELOW_LEFT,
		HB_UNICODE_COMBINING_CLASS_BELOW,
		HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT,
		HB_UNICODE_COMBINING_CLASS_LEFT,
		HB_UNICODE_COMBINING_CLASS_RIGHT,
		HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT,
		HB_UNICODE_COMBINING_CLASS_ABOVE,
		HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT,
		HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW,
		HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE,
		HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT,
		HB_UNICODE_COMBINING_CLASS_INVALID
	}
	public function bool_t unicode_compose_func_t(unicode_funcs_t ufuncs, codepoint_t a, codepoint_t b, codepoint_t ab, void* user_data);
	public function c_uint unicode_decompose_compatibility_func_t(unicode_funcs_t ufuncs, codepoint_t u, codepoint_t decomposed, void* user_data);
	public function bool_t unicode_decompose_func_t(unicode_funcs_t ufuncs, codepoint_t ab, codepoint_t a, codepoint_t b, void* user_data);
	public function c_uint unicode_eastasian_width_func_t(unicode_funcs_t ufuncs, codepoint_t unicode, void* user_data);
	[CRepr]
	public struct unicode_funcs_t
	{
	}
	public function unicode_general_category_t unicode_general_category_func_t(unicode_funcs_t ufuncs, codepoint_t unicode, void* user_data);
	public enum unicode_general_category_t : c_int
	{
		HB_UNICODE_GENERAL_CATEGORY_CONTROL,
		HB_UNICODE_GENERAL_CATEGORY_FORMAT,
		HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED,
		HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE,
		HB_UNICODE_GENERAL_CATEGORY_SURROGATE,
		HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER,
		HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER,
		HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER,
		HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER,
		HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER,
		HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK,
		HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK,
		HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK,
		HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER,
		HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER,
		HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER,
		HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION,
		HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION,
		HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION,
		HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION,
		HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION,
		HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION,
		HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION,
		HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL,
		HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL,
		HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL,
		HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL,
		HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR,
		HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR,
		HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR
	}
	public function codepoint_t unicode_mirroring_func_t(unicode_funcs_t ufuncs, codepoint_t unicode, void* user_data);
	public function script_t unicode_script_func_t(unicode_funcs_t ufuncs, codepoint_t unicode, void* user_data);
	[CRepr]
	public struct user_data_key_t
	{
		c_char unused;
	}
	[Union]
	public struct var_int_t
	{
		public c_uint u32;
		public c_int i32;
	}
	[Union]
	public struct var_num_t
	{
		public float f;
		public c_uint u32;
		public c_int i32;
	}
	[CRepr]
	public struct variation_t
	{
		tag_t tag;
		float value;
	}
}